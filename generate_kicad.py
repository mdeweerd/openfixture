#!/usr/bin/env python
from __future__ import print_function
from __future__ import absolute_import

import os
import sys
import time
import re
from os import path
from io import open
from textwrap import dedent
import pkgutil
import subprocess
import xml.etree.ElementTree as xe
from shutil import copyfile


import ezdxf


__version__ = '0.1'

PIN_TS_BASE = 0x23420000
TEDIT_BASE = 0x23430000
PATH_BASE = 0x23440000
DEFAULT_FP="Pogopin:AutogeneratedPogopinFootprint"
DEFAULT_HOLE_DIA=1.9

def print_dxf_entity(e):
    print("LINE on layer: %s" % e.dxf.layer)
    print("start point: %s %s" % e.dxf.start)
    print("end point: %s %s" % e.dxf.end)

def is_number(s):
    try:
        float(s)
        return True
    except TypeError:
        return False
    except ValueError:
        return False

def sch_template(name, pins, yspace=200):
    templ = '''
        EESchema Schematic File Version 5
        EELAYER 30 0
        EELAYER END
        $Descr A3 16535 11693
        encoding utf-8
        Sheet 1 1
        Title "{name}"
        Date "{date}"
        Rev ""
        Comp ""
        Comment1 ""
        Comment2 ""
        Comment3 ""
        Comment4 ""
        Comment5 ""
        Comment6 ""
        Comment7 ""
        Comment8 ""
        Comment9 ""
        $EndDescr
        {components}
        $EndSCHEMATC
    '''

    components_list = []
    for i, pin in enumerate(pins):
        #print(pin) # Show contents of dictionary
        uid = pin.get('uid')
        identifier = pin.get('identifier')
        #x = pin.get('x # Board position')
        #y = pin.get('y # Board position')
        netname = pin.get('netname')
        tmp = pin.get('diamOrModel')

        footprint=DEFAULT_FP
        if not is_number(tmp):
           footprint = pin.get('diamOrModel')

        value = 'pogopin'
        x, y = 1000, 1000 + i*yspace
        components_list.append(dedent('''
            $Comp
            L Connector:Conn_01x01_Female {identifier}
            U 1 1 {uid}
            P {x} {y}
            F 0 "{identifier}" H {xmoff} {ypoff} 50  0000 R CNN
            F 1 "{value}" H {xpoff} {y} 50  0000 L CNN
            F 2 "{footprint}" H {x} {y} 50  0001 C CNN
            F 3 "~" H {x} {y} 50  0001 C CNN
                    1    {x} {y}
                    -1   0    0    1   
            $EndComp
            Wire Wire Line
                    {wx0} {wy0} {wx1} {wy1}
            Text Label {wx1} {wy0} 2    50   ~ 0
            {netname}
            '''.format(
                   i=i,
                   uid=uid,
                   identifier=identifier,
                   value=value,
                   x=x,y=y,
                   xmoff=x-50,xpoff=x+50,
                   ymoff=y-50,ypoff=y+50,
                   wx0=x+200,wy0=y,wx1=x+575,wy1=y,
                   netname=netname,
                   footprint=footprint,
               )).strip())

    components='\n'.join(components_list)
    return dedent(templ).lstrip().format(components=components,name=name,date=time.strftime("%d %b %Y"))
def pcb_template(outline, pins, annular=0.5):
    pcb_templ = '''
        (kicad_pcb (version 20190605) (host pogojig "(5.1.9)-1")

          (general
            (thickness 1.6)
            (drawings {plen})
            (tracks 0)
            (zones 0)
            (modules {plen})
            (nets {plenp1})
          )

          (page "A4")
          (layers
            (0 "F.Cu" signal)
            (31 "B.Cu" signal)
            (32 "B.Adhes" user)
            (33 "F.Adhes" user)
            (34 "B.Paste" user)
            (35 "F.Paste" user)
            (36 "B.SilkS" user)
            (37 "F.SilkS" user)
            (38 "B.Mask" user)
            (39 "F.Mask" user)
            (40 "Dwgs.User" user)
            (41 "Cmts.User" user)
            (42 "Eco1.User" user)
            (43 "Eco2.User" user)
            (44 "Edge.Cuts" user)
            (45 "Margin" user)
            (46 "B.CrtYd" user)
            (47 "F.CrtYd" user)
            (48 "B.Fab" user)
            (49 "F.Fab" user)
          )

          (setup
            (last_trace_width 0.25)
            (trace_clearance 0.2)
            (zone_clearance 0.508)
            (zone_45_only no)
            (trace_min 0.2)
            (via_size 0.8)
            (via_drill 0.4)
            (via_min_size 0.4)
            (via_min_drill 0.3)
            (uvia_size 0.3)
            (uvia_drill 0.1)
            (uvias_allowed no)
            (uvia_min_size 0.2)
            (uvia_min_drill 0.1)
            (edge_width 0.1)
            (segment_width 0.2)
            (pcb_text_width 0.3)
            (pcb_text_size 1.5 1.5)
            (mod_edge_width 0.15)
            (mod_text_size 1 1)
            (mod_text_width 0.15)
            (pad_size 1.524 1.524)
            (pad_drill 0.762)
            (pad_to_mask_clearance 0)
            (aux_axis_origin 0 0)
            (visible_elements 7FFFFFFF)
            (pcbplotparams
              (layerselection 0x010fc_ffffffff)
              (usegerberextensions false)
              (usegerberattributes false)
              (usegerberadvancedattributes false)
              (creategerberjobfile false)
              (excludeedgelayer true)
              (linewidth 0.100000)
              (plotframeref false)
              (viasonmask false)
              (mode 1)
              (useauxorigin false)
              (hpglpennumber 1)
              (hpglpenspeed 20)
              (hpglpendiameter 15.000000)
              (psnegative false)
              (psa4output false)
              (plotreference true)
              (plotvalue true)
              (plotinvisibletext false)
              (padsonsilk false)
              (subtractmaskfromsilk false)
              (outputformat 1)
              (mirror false)
              (drillshape 1)
              (scaleselection 1)
              (outputdirectory ""))
          )

          (net 0 "")
          {{net_defs}}

          (net_class "Default" "This is the default net class."
            (clearance 0.2)
            (trace_width 0.25)
            (via_dia 0.8)
            (via_drill 0.4)
            (uvia_dia 0.3)
            (uvia_drill 0.1)
            {{net_class_defs}}
          )
          
          {{module_defs}}

          {{edge_cuts}}
        )'''.format(version=__version__,plen=len(pins),plenp1=len(pins)+1)

    module_defs = []
    net_defs = []
    net_class_defs = []
    for i, pin in enumerate(pins):
        uid = pin.get('uid')
        identifier = pin.get('identifier')
        x = pin.get('x') # Board position
        y = pin.get('y') # Board position
        netname = pin.get('netname')
        tmp = pin.get('diamOrModel')

        footprint=DEFAULT_FP
        hole_dia=DEFAULT_HOLE_DIA
        if not is_number(tmp):
           footprint = pin.get('diamOrModel')

        pad_dia = hole_dia + 2*annular

        mod = '''
          (module "{footprint}" (layer "F.Cu") (tedit {teditb:08X}) (tstamp {pintsb:08X})
            (at {x} {y})
            (descr "Pogo pin {i}")
            (tags "test point plated hole")
            (path "/{uid}")
            (attr virtual)
            (fp_text reference "{identifier}" (at 0 -{pad_radp1}) (layer "F.SilkS")
              (effects (font (size 1 1) (thickness 0.15)))
            )
            (fp_text value "pogo pin {i}" (at 0 {pad_radp1}) (layer "F.Fab")
              (effects (font (size 1 1) (thickness 0.15)))
            )
            (fp_text user "%R" (at 0 -{pad_radp1}) (layer "F.Fab")
              (effects (font (size 1 1) (thickness 0.15)))
            )
            (fp_circle (center 0 0) (end {pad_dia} 0) (layer "F.CrtYd") (width 0.05))
            (fp_circle (center 0 0) (end 0 -{pad_dia}) (layer "F.SilkS") (width 0.12))
            (pad "1" thru_hole circle (at 0 0) (size {pad_dia} {pad_dia}) (drill {hole_dia}) (layers *.Cu *.Mask)
              (net {ip1} "{netname}"))
          )'''.format(
              i=i,ip1=i+1,
              identifier=identifier,
              netname=netname,
              pad_dia=pad_dia,hole_dia=hole_dia,
              x=x,y=y,
              teditb=TEDIT_BASE+i,
              uid=uid,
              pintsb=PIN_TS_BASE+i,
              pad_radp1=pad_dia/2+1,
              footprint=footprint,
              )
        module_defs.append(mod)
        net_defs.append('(net {ip1} "{netname}")'.format(ip1=i+1,netname=netname))
        net_class_defs.append('(add_net "{netname}")'.format(netname=netname))

    edge_cuts = [ '(gr_line (start {x1} {y1}) (end {x2} {y2}) (layer "Edge.Cuts") (width 0.05))'.format(x1=x1,y1=y1,x2=x2,y2=y2)
                  for (x1, y1), (x2, y2) in outline ]

    return dedent(pcb_templ).format(
            net_defs='\n'.join(net_defs),
            net_class_defs='\n'.join(net_class_defs),
            module_defs='\n'.join(module_defs),
            edge_cuts='\n'.join(edge_cuts))



if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('outline', metavar='outline.dxf', help='Board outline DXF')
    parser.add_argument('output', default='kicad', help='Output directory/project name and path')
    parser.add_argument('--testpins', '-t', metavar='TESTPINS', default="DEMO1:20:20:NETNAME1,DEMO2:60:80:NETNAME2",help='List of test pins NAME1:X1:Y1:NETNAME1:diam1OrModel?,NAME2:X2:Y2:NETNAME2:diam1OrModel?')
    parser.add_argument('--yspace', '-y', type=int, default=200, help='Schematic pin Y spacing in mil (default: 200)')
    parser.add_argument('--annular', '-a', type=float, default=0.5, help='Pogo pin annular ring width in mm (default: 0.5)')
    parser.add_argument('--diameter', '-d', type=float, default=DEFAULT_HOLE_DIA, help='Pogo pin diameter in mm (default: %f)' % (DEFAULT_HOLE_DIA))
    parser.add_argument('--name', '-n', default='jig', help='Output KiCAD project name')
    args = parser.parse_args()

    pattern = re.compile(
      r'(?P<iden>[^:,]+)'
      +':(?P<x>[^:,]+)'
      +':(?P<y>[^:,]+)'
      +':(?P<netname>[^:,]+)'
      +'(:(?P<diamOrModel>[^,]+))?'
      )
    pins=[]
    i=0
    for m in re.finditer(pattern,args.testpins):
        i+=1
        identifier=m.group('iden')
        x=m.group('x')
        y=m.group('y')
        netname=m.group('netname')
        diamOrModel=m.group('diamOrModel')
        uid="{val:08X}".format(val=i)
        #print('Iden:%s' % (identifier)) # Show identifier, for debugging
        pins.append({'identifier':identifier,
                 'x':x,'y':y,
                 'netname':netname,'diamOrModel':diamOrModel,
                 'uid':uid,
             })

    if not path.exists(args.output):
        os.mkdir(args.output)

    if not path.isdir(args.output):
        raise SystemError(strf(F('Output path "{args.output}" is not a directory')))

    #pins = [ (
    #            (page_x + px_to_mm(x) + px_to_mm(w)/2,
    #             page_y - page_h + px_to_mm(y) + px_to_mm(w)/2),
    #            px_to_mm(w)) for x, y, w, h in dims ]
    #pins = [ ( (10, 20), 1 ), ( (100,30), 2) ]

    doc = ezdxf.readfile(args.outline)
    outline = []
    for line in doc.modelspace().query('LINE'):
        #print_dxf_entity(line)
        try:
          (x1, y1), (x2, y2) = line.dxf.start, line.dxf.end
          outline.append(((x1, -y1), (x2, -y2)))
        except:
          abc=None

    name=args.name
    sch_name=path.join(args.output, '{name}.sch').format(name=name)
    pcb_name=path.join(args.output, '{name}.kicad_pcb').format(name=name)
    pro_name=path.join(args.output, '{name}.pro').format(name=name)
    lib_name=path.join(args.output, '{name}-cache.lib').format(name=name)
    template_path=os.path.dirname(os.path.realpath(__file__))+'/templates/'

    with open(sch_name, 'w', encoding='utf8') as sch:
        title='{name} generated schematic (PogoJig v{version})'.format(name=name,version=__version__)
        sch.write(sch_template(title, pins, yspace=args.yspace).decode('utf8'))

    with open(pcb_name, 'w', encoding='utf8') as pcb:
        pcb.write(pcb_template(outline, pins, annular=args.annular).decode('utf8'))

    with open(pro_name, 'w', encoding='utf8') as f:
        with open(template_path+'kicad.pro', 'r') as s:
            f.write(s.read())
            s.close()
            f.close()

    with open(lib_name, 'w', encoding='utf8') as f:
        with open(template_path+'kicad-cache.lib', 'r') as s:
            f.write(s.read())
            s.close()
            f.close()

